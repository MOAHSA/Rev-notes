# Bug Hunting Methodology - Recon & Exploitation

**Source:** [My Methodology in Recon and Finding Bugs (Medium - Orwa Atyat)](https://orwaatyat.medium.com/my-methodology-in-recon-and-find-bugs-my-methodology-in-hunting-using-phone-ccc9fe06dd2d)

---

## üìå Overview

This document summarizes Orwa Atyat‚Äôs detailed methodology in reconnaissance (recon) and bug hunting, specifically focusing on how he approaches finding security vulnerabilities. The methodology is structured into **information gathering**, **recon techniques**, **bug discovery**, and **exploitation mindset**.

---

## üîç Reconnaissance Methodology

### 1. Information Gathering

* **Identify the target scope**

  * Main domain
  * Subdomains
  * Mobile apps (iOS / Android)
  * APIs and endpoints
* **Collect metadata**

  * WHOIS records
  * SSL/TLS certificates
  * Publicly available code (GitHub, GitLab, Bitbucket)
  * Job postings (to identify tech stack)
* **Tools used:**

  * `whois`, `dig`, `nslookup`
  * Certificate transparency logs (`crt.sh`, `certspotter`)
  * GitHub Dorking

### 2. Subdomain Enumeration

* Active enumeration:

  * `amass`
  * `subfinder`
  * `assetfinder`
* Passive enumeration:

  * `crt.sh`
  * `VirusTotal`
  * Search engines (`site:example.com`)
* Bruteforce techniques:

  * Wordlist-based subdomain discovery

### 3. Content Discovery

* Directory bruteforcing:

  * `ffuf`, `dirsearch`, `gobuster`
* Common paths and files:

  * `/robots.txt`
  * `/sitemap.xml`
  * `.git/`, `.svn/`
  * Backup files (`.bak`, `.old`, `.zip`)

### 4. Technology Fingerprinting

* Identify frameworks, languages, and versions
* Detect CMS (WordPress, Joomla, Drupal)
* WAF detection (`wafw00f`)
* JS libraries and their versions
* CDN and hosting providers

### 5. API Recon

* Find API endpoints via:

  * Mobile app reverse engineering (APK/IPA)
  * Burp Suite traffic interception
  * Swagger / OpenAPI docs
  * GraphQL endpoints (`/graphql`)

### 6. Mobile Recon

* Decompile APKs (using `apktool`, `jadx`)
* Analyze permissions (AndroidManifest.xml)
* Look for hardcoded API keys, secrets
* Test API calls from mobile app endpoints

---

## üïµÔ∏è‚Äç‚ôÇÔ∏è Vulnerability Discovery

### 1. Common Vulnerabilities to Look For

* **Authentication & Authorization Issues**

  * IDOR (Insecure Direct Object Reference)
  * Broken access controls
* **Injection Attacks**

  * SQL Injection
  * Command Injection
  * XSS (Reflected, Stored, DOM-based)
* **Misconfigurations**

  * Open S3 buckets
  * Exposed admin panels
  * Default credentials
* **Information Disclosure**

  * Verbose error messages
  * Source code leaks
  * Git history leaks

### 2. Business Logic Bugs

* Exploit flaws in the intended logic of an app
* Examples:

  * Bypassing payment flows
  * Coupon abuse
  * Race conditions

### 3. Advanced Recon Techniques

* Parameter fuzzing (`ffuf`, `paramspider`)
* Hidden parameter discovery
* Request smuggling
* Host header injection

---

## ‚ö° Exploitation Mindset

* Always think like a **real attacker**, not just a bug bounty hunter.
* Use recon to build a **full map of the attack surface**.
* Combine multiple small findings into a bigger exploit chain.
* Prioritize **impactful bugs** (data exfiltration, account takeover, RCE).

---

## üõ†Ô∏è Toolset (from the methodology)

* **Recon:** `amass`, `subfinder`, `assetfinder`
* **Content discovery:** `ffuf`, `dirsearch`, `gobuster`
* **Fingerprinting:** `wappalyzer`, `wafw00f`
* **Exploitation:** Burp Suite, Postman, custom scripts
* **Mobile:** `apktool`, `jadx`, `objection`

---

## ‚úÖ Summary

Orwa Atyat‚Äôs methodology emphasizes **continuous recon**, **layered discovery**, and **creativity in exploitation**. The key is to:

1. Gather as much information as possible.
2. Systematically enumerate the attack surface.
3. Test all possible entry points (web, mobile, APIs).
4. Look for overlooked details (misconfigurations, hidden parameters).
5. Chain vulnerabilities for maximum impact.

---

üìñ **Source Reference:** [Orwa Atyat - My Methodology in Recon and Finding Bugs (Medium)](https://orwaatyat.medium.com/my-methodology-in-recon-and-find-bugs-my-methodology-in-hunting-using-phone-ccc9fe06dd2d)
